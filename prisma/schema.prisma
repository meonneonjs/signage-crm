generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  role           UserRole  @default(client)
  organizationId String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id])
  accounts     Account[]
  sessions     Session[]
  designs      Design[]    @relation("SubmittedDesigns")
  comments     Comment[]
  assignedLeads Lead[] @relation("AssignedLeads")
  leadActivities LeadActivity[]
  clients      Client[]
  clientNotes  ClientNote[]
  teamMemberships ProjectTeamMember[]
  projectCommunications ProjectCommunication[] @relation("ProjectCommunicationToUser")
  userIntegration UserIntegration?
  activities   Activity[] @relation("UserActivities")
  assignedCampaigns MarketingCampaign[] @relation("AssignedCampaigns")
  assignedMessages AdMessage[] @relation("AssignedMessages")
  roles        Role[]
  communications Communication[] @relation("UserCommunications")
}

enum UserRole {
  admin
  client
  team_member
}

model Organization {
  id            String   @id @default(cuid())
  name          String
  slug          String   @unique
  logo          String?
  branding      Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  stripeCustomerId String? @unique
  stripeConnectedAccountId String? @unique
  subscriptionStatus SubscriptionStatus @default(ACTIVE)
  subscriptionPlan SubscriptionPlan @default(BASIC)
  subscriptionPriceId String?
  subscriptionEndsAt DateTime?

  users    User[]
  projects Project[]
  invoices Invoice[]
  payments Payment[]
  subscriptions Subscription[]
}

model Project {
  id             String   @id @default(cuid())
  name           String
  description    String?
  status         String   @default("active")
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id])
  designs      Design[]
  files        File[]
  teamMembers  ProjectTeamMember[]
  communications ProjectCommunication[]
  designVersions DesignVersion[]
  qualityCheckpoints QualityControlCheckpoint[]
  projectFiles ProjectFile[]
  warranties Warranty[]
  clientProjects Client[] @relation("ClientProjects")
  customerProjects Customer[] @relation("CustomerProjects")
}

model Design {
  id            String       @id @default(cuid())
  title         String
  description   String?
  status        DesignStatus @default(PENDING)
  version       Int          @default(1)
  projectId     String
  submittedById String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  project     Project     @relation(fields: [projectId], references: [id])
  submittedBy User       @relation("SubmittedDesigns", fields: [submittedById], references: [id])
  images      Image[]
  comments    Comment[]
  approvals   Approval[]
}

enum DesignStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
  ARCHIVED
}

model Image {
  id        String   @id @default(cuid())
  url       String
  caption   String?
  designId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  design Design @relation(fields: [designId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  designId  String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  design Design @relation(fields: [designId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Approval {
  id        String        @id @default(cuid())
  status    ApprovalState
  comment   String?
  designId  String
  userId    String
  createdAt DateTime      @default(now())

  design Design @relation(fields: [designId], references: [id], onDelete: Cascade)
}

enum ApprovalState {
  approved
  rejected
}

model File {
  id          String   @id @default(cuid())
  name        String
  url         String
  size        Int
  type        String
  projectId   String
  uploadedBy  String
  isArchived  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Lead {
  id                    String                @id @default(cuid())
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  companyName           String?
  contactName           String
  email                 String
  phone                 String?
  source                LeadSource
  status                LeadStatus            @default(NEW)
  priority              LeadPriority          @default(MEDIUM)
  score                 LeadScore             @default(COLD)
  lastContactedAt       DateTime?
  nextFollowUpDate      DateTime?
  leadValue             Float?
  conversionProbability Float?
  industry              String?
  employeeCount         Int?
  annualRevenue         Float?
  website               String?
  address               String?
  city                  String?
  state                 String?
  zipCode               String?
  budget                Float?
  timeline              DateTime?
  requirements          String?         @db.Text
  notes                 String?         @db.Text
  tags                  String[]
  assignedToId          String?
  convertedToId         String?               @unique
  campaigns             CampaignParticipant[]
  deals                 Deal[]
  assignedTo            User?                 @relation("AssignedLeads", fields: [assignedToId], references: [id])
  convertedTo           Client?               @relation(fields: [convertedToId], references: [id])
  activities            LeadActivity[]
  assignedClient        Client?               @relation("AssignedLeads", fields: [assignedClientId], references: [id])
  assignedClientId      String?

  @@index([status])
  @@index([assignedToId])
  @@index([score])
  @@index([lastContactedAt])
  @@index([status, score])
  @@index([lastContactedAt, status])
}

model LeadActivity {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  type        String
  title       String
  description String?         @db.Text
  scheduledAt DateTime?
  completedAt DateTime?
  leadId      String
  userId      String
  lead        Lead      @relation(fields: [leadId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id])

  @@index([createdAt, leadId])
  @@index([userId])
}

model Client {
  id               String           @id @default(cuid())
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  name             String
  email            String           @unique
  phone            String?
  companyName      String?
  industry         String?
  website          String?
  userId           String
  lastContactDate  DateTime?
  nextFollowUpDate DateTime?
  customFields     Json?
  address          String?
  city             String?
  country          String?
  notes            String?
  state            String?
  status           String           @default("Lead")
  zipCode          String?
  user             User             @relation(fields: [userId], references: [id])
  clientNotes      ClientNote[]
  lead             Lead?
  projects         Project[]        @relation("ClientProjects")
  communications   Communication[]
  stripeCustomerId String? @unique
  invoices         Invoice[]
  payments         Payment[]
  teamMemberships  ProjectTeamMember[]
  assignedLeads    Lead[]           @relation("AssignedLeads")
  assignedMessages AdMessage[]     @relation("AssignedMessages")

  @@index([userId])
  @@index([status])
}

model ClientNote {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String?
  content   String
  type      String
  clientId  String
  userId    String
  client    Client   @relation(fields: [clientId], references: [id])
  createdBy User     @relation(fields: [userId], references: [id])

  @@index([clientId])
  @@index([userId])
}

model ProjectTeamMember {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  role      String
  startDate DateTime?
  endDate   DateTime?
  projectId String
  userId    String
  project   Project   @relation(fields: [projectId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
  client    Client?   @relation(fields: [clientId], references: [id])
  clientId  String?

  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
}

model ProjectCommunication {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  type         String
  title        String
  content      String?
  projectId    String
  project      Project    @relation(fields: [projectId], references: [id])
  attachments  Document[] @relation("DocumentToProjectCommunication")
  participants User[]     @relation("ProjectCommunicationToUser")

  @@index([projectId])
}

model DesignVersion {
  id              String    @id @default(cuid())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  versionNumber   Int
  status          DesignStatus @default(DRAFT)
  fileUrl         String
  thumbnailUrl    String?
  description     String?
  feedback        String?
  approvedAt      DateTime?
  approvedBy      String?
  projectId       String
  project         Project   @relation(fields: [projectId], references: [id])
  designChecklist DesignChecklist?

  @@index([projectId])
  @@index([status])
}

model DesignChecklist {
  id                String       @id @default(cuid())
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  brandingChecked   Boolean      @default(false)
  dimensionsChecked Boolean      @default(false)
  colorsChecked     Boolean      @default(false)
  typosChecked      Boolean      @default(false)
  layoutChecked     Boolean      @default(false)
  materialsChecked  Boolean      @default(false)
  notesChecked      Boolean      @default(false)
  checkedBy         String?
  designVersionId   String       @unique
  designVersion     DesignVersion @relation(fields: [designVersionId], references: [id])
}

model QualityControlCheckpoint {
  id                String    @id @default(cuid())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  stage             ProductionStage
  status            QCStatus @default(PENDING)
  checkedBy         String?
  checkedAt         DateTime?
  notes             String?
  images            String[]
  projectId         String
  project           Project   @relation(fields: [projectId], references: [id])

  @@index([projectId])
  @@index([stage])
  @@index([status])
}

model ProjectFile {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String          @db.VarChar(255)
  type        FileType
  url         String          @db.VarChar(2048)
  size        Int
  uploadedBy  String
  category    FileCategory
  version     Int       @default(1)
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id])

  @@index([projectId, type])
  @@index([category])
}

model Communication {
  id          String            @id @default(cuid())
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  type        CommunicationType
  status      String
  subject     String?
  content     String          @db.Text
  metadata    Json?           @db.JsonB
  scheduledAt DateTime?
  sentAt      DateTime?
  clientId    String
  userId      String

  client      Client            @relation(fields: [clientId], references: [id])
  user        User              @relation("UserCommunications", fields: [userId], references: [id])
  customer    Customer?         @relation(fields: [customerId], references: [id])
  customerId  String?
  contact     Contact?          @relation(fields: [contactId], references: [id])
  contactId   String?

  @@index([type, status, createdAt])
  @@index([clientId])
  @@index([userId])
  @@index([type])
  @@index([status])
}

model SystemSettings {
  id                String   @id @default(cuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  telephonyProvider String?  // twilio, messagebird, vonage
  telephonyApiKey   String?
  telephonyApiSecret String?
  telephonyPhone    String?
  emailProvider     String?  // sendgrid, aws-ses, mailgun
  emailApiKey       String?
  emailFromAddress  String?
}

model UserIntegration {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id])
  googleConnected Boolean @default(false)
  googleEmail    String?
  googleRefreshToken String?
  lastSyncedAt   DateTime?
  calendarSyncEnabled Boolean @default(true)
  emailSyncEnabled Boolean @default(true)
}

enum LeadSource {
  INSTAGRAM
  WEBSITE
  TRADE_SHOW
  IN_PERSON
  PERMIT_PORTAL
  REFERRAL
  OTHER
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  UNQUALIFIED
  PROPOSAL_SENT
  CONVERTED
  LOST
}

enum LeadPriority {
  LOW
  MEDIUM
  HIGH
}

enum DealStage {
  INITIAL_CONTACT
  DESIGN_CONSULTATION
  PROPOSAL
  DESIGN_APPROVAL
  PRODUCTION
  INSTALLATION
  FOLLOW_UP
  CLOSED_WON
  CLOSED_LOST
  CONTRACT_SENT
  CONTRACT_SIGNED
  PERMIT_PENDING
  PERMIT_APPROVED
}

enum CommissionType {
  SELF_GENERATED
  COMPANY_PROVIDED
  OVERRIDE
}

enum PaymentStatus {
  PENDING
  PAID
  VOID
  FAILED
  REFUNDED
}

enum LeadScore {
  COLD
  WARM
  HOT
}

enum SignageType {
  MONOCHROME_STANDARD
  RGB_LED
  RAINBOW_LED
  INDOOR
  OUTDOOR
  VEHICLE_WRAP
  DIGITAL_DISPLAY
  WAYFINDING
  ARCHITECTURAL
  BANNER
  WINDOW_GRAPHICS
  TRADE_SHOW
  CUSTOM
}

enum MaterialType {
  // Backing Materials
  ALUMINUM_COMPOSITE
  ACRYLIC
  ALUMINUM
  FOAM_BOARD
  CORRUGATED_PLASTIC
  FABRIC
  GLASS
  WOOD
  STEEL
  PVC
  DIBOND
  
  // LED Types
  LED_SMD
  LED_THT
  LED_COB
  LED_MATRIX
  
  // Special Materials
  REFLECTIVE_VINYL
  TRANSLUCENT_VINYL
  PERFORATED_VINYL
  ANTI_GRAFFITI_LAMINATE
  PHOTOLUMINESCENT
  OTHER
}

enum PrintingMethod {
  DIGITAL
  SCREEN_PRINTING
  UV_PRINTING
  SUBLIMATION
  LASER_CUTTING
  CNC_ROUTING
  VINYL_CUTTING
  HAND_PAINTING
}

enum InstallationType {
  WALL_MOUNTED
  FREESTANDING
  SUSPENDED
  VEHICLE
  WINDOW
  GROUND_MOUNTED
  PYLON
  MONUMENT
}

enum ProjectStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  BLOCKED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum MilestoneStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  DELAYED
}

enum ExpenseCategory {
  MATERIALS
  LABOR
  EQUIPMENT
  PERMITS
  TRAVEL
  OTHER
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  ARCHIVED
}

enum QCStatus {
  PENDING
  PASSED
  FAILED
  NEEDS_REVIEW
}

enum FileType {
  DESIGN
  MOCKUP
  PROOF
  PHOTO
  DOCUMENT
  CONTRACT
  INVOICE
  OTHER
}

enum FileCategory {
  DESIGN
  PRODUCTION
  INSTALLATION
  CLIENT_FEEDBACK
  DOCUMENTATION
  ADMINISTRATIVE
}

enum ProductionStage {
  DESIGN
  PRINTING
  FABRICATION
  ASSEMBLY
  QUALITY_CHECK
  READY_FOR_INSTALLATION
}

enum CommunicationType {
  EMAIL
  SMS
  CALL
  MEETING
}

model Customer {
  id                      String         @id @default(cuid())
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  businessName           String
  email                  String?
  phone                  String?
  website                String?
  industry               String?
  employeeCount          Int?
  annualRevenue          Float?
  address                String?
  city                   String?
  state                  String?
  zipCode                String?
  country                String?
  notes                  String?
  status                 String         @default("ACTIVE")
  customFields           Json?
  contacts               Contact[]
  projects               Project[]      @relation("CustomerProjects")
  warranties             Warranty[]
  proposals              Proposal[]
  reviews                Review[]
  followUps              FollowUp[]
  communications         Communication[]
  stripeCustomerId       String?        @unique
  invoices               Invoice[]
  payments               Payment[]

  @@index([status])
}

model Contact {
  id                      String         @id @default(cuid())
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  firstName              String
  lastName               String
  email                  String?
  phone                  String?
  title                  String?
  department             String?
  isPrimary              Boolean        @default(false)
  notes                  String?
  customerId             String
  customer               Customer       @relation(fields: [customerId], references: [id])
  communications         Communication[]
  proposals              Proposal[]

  @@index([customerId])
  @@index([isPrimary])
}

model Review {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  rating      Int
  comment     String?
  customer    Customer  @relation(fields: [customerId], references: [id])
  customerId  String

  @@index([customerId])
}

model Warranty {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  type        String
  startDate   DateTime
  endDate     DateTime
  description String?
  status      String    // "ACTIVE", "EXPIRED", "CLAIMED"
  customer    Customer  @relation(fields: [customerId], references: [id])
  customerId  String
  project     Project   @relation(fields: [projectId], references: [id])
  projectId   String

  @@index([customerId])
  @@index([projectId])
}

model FollowUp {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  dueDate     DateTime
  status      String
  notes       String?
  customer    Customer  @relation(fields: [customerId], references: [id])
  customerId  String

  @@index([customerId])
  @@index([dueDate])
  @@index([status])
}

model Proposal {
  id          String         @id @default(cuid())
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  title       String
  content     Json
  totalAmount Float
  status      ProposalStatus @default(DRAFT)
  validUntil  DateTime?
  signedAt    DateTime?
  signedBy    String?
  paymentStatus PaymentStatus @default(PENDING)
  paidAt      DateTime?

  // Relations
  customer    Customer @relation(fields: [customerId], references: [id])
  customerId  String
  contact     Contact? @relation(fields: [contactId], references: [id])
  contactId   String?
  deal        Deal? @relation(fields: [dealId], references: [id])
  dealId      String?

  @@index([customerId])
  @@index([contactId])
  @@index([dealId])
}

enum ProposalStatus {
  DRAFT
  SENT
  VIEWED
  SIGNED
  EXPIRED
  DECLINED
}

model Activity {
  id          String   @id @default(cuid())
  type        String
  userId      String
  userName    String
  entityId    String
  entityType  String
  description String
  metadata    Json?
  importance  String   @default("medium")
  isSystem    Boolean  @default(false)
  createdAt   DateTime @default(now())
  user        User     @relation("UserActivities", fields: [userId], references: [id])

  @@index([userId])
  @@index([entityId])
  @@index([entityType])
  @@index([createdAt])
  @@index([importance])
  @@index([type])
}

model MarketingCampaign {
  id               String             @id @default(cuid())
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  name             String
  description      String?            @db.Text
  type             MarketingType
  status           CampaignStatus
  startDate        DateTime
  endDate          DateTime?
  budget           Float
  actualSpend      Float              @default(0)
  platform         MarketingPlatform
  targetAudience   Json?              // Audience targeting criteria
  goals            String[]           // Campaign objectives
  tags             String[]
  metrics          MarketingMetrics?
  content          MarketingContent[]
  adSets           AdSet[]
  messages         AdMessage[]
  assignedToId     String?
  assignedTo       User?              @relation("AssignedCampaigns", fields: [assignedToId], references: [id])

  @@index([status])
  @@index([platform])
  @@index([assignedToId])
}

model MarketingMetrics {
  id                String           @id @default(cuid())
  campaignId        String           @unique
  campaign          MarketingCampaign @relation(fields: [campaignId], references: [id])
  impressions       Int              @default(0)
  clicks            Int              @default(0)
  conversions       Int              @default(0)
  reach             Int              @default(0)
  engagement        Int              @default(0)
  spend             Float            @default(0)
  cpc               Float?           // Cost per click
  cpm               Float?           // Cost per thousand impressions
  ctr               Float?           // Click-through rate
  roas             Float?           // Return on ad spend
  lastUpdated       DateTime         @default(now())
  
  @@index([campaignId])
}

model MarketingContent {
  id               String           @id @default(cuid())
  campaignId       String
  campaign         MarketingCampaign @relation(fields: [campaignId], references: [id])
  type             ContentType
  title            String
  description      String?          @db.Text
  mediaUrl         String?
  callToAction     String?
  landingPage      String?
  status           ContentStatus    @default(DRAFT)
  performance      Json?            // Performance metrics for this content
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@index([campaignId])
  @@index([type])
  @@index([status])
}

model AdSet {
  id               String           @id @default(cuid())
  campaignId       String
  campaign         MarketingCampaign @relation(fields: [campaignId], references: [id])
  name             String
  status           AdSetStatus
  budget           Float
  startDate        DateTime
  endDate          DateTime?
  targeting        Json             // Detailed targeting options
  placements       String[]         // Ad placement locations
  bidStrategy      String?
  ads              Ad[]
  
  @@index([campaignId])
  @@index([status])
}

model Ad {
  id               String           @id @default(cuid())
  adSetId          String
  adSet            AdSet           @relation(fields: [adSetId], references: [id])
  name             String
  status           AdStatus
  preview          String?         // Ad preview URL
  mediaUrls        String[]        // Array of media URLs
  headline         String
  primaryText      String?         @db.Text
  description      String?         @db.Text
  callToAction     String?
  destinationUrl   String?
  metrics          Json?           // Ad-level metrics
  
  @@index([adSetId])
  @@index([status])
}

model AdMessage {
  id               String           @id @default(cuid())
  campaignId       String
  campaign         MarketingCampaign @relation(fields: [campaignId], references: [id])
  platform         MarketingPlatform
  senderId         String          // Social media user ID
  senderName       String
  message          String          @db.Text
  receivedAt       DateTime        @default(now())
  status           MessageStatus   @default(NEW)
  assignedToId     String?
  assignedTo       User?           @relation("AssignedMessages", fields: [assignedToId], references: [id])
  response         String?         @db.Text
  respondedAt      DateTime?
  metadata         Json?           // Additional platform-specific data
  client           Client?         @relation("AssignedMessages", fields: [clientId], references: [id])
  clientId         String?

  @@index([campaignId])
  @@index([status])
  @@index([assignedToId])
  @@index([platform])
}

enum MarketingType {
  DISPLAY_AD
  SEARCH_AD
  SOCIAL_AD
  VIDEO_AD
  EMAIL_CAMPAIGN
  CONTENT_MARKETING
  INFLUENCER_CAMPAIGN
  OTHER
}

enum MarketingPlatform {
  META
  GOOGLE
  LINKEDIN
  TWITTER
  TIKTOK
  INSTAGRAM
  YOUTUBE
  EMAIL
  OTHER
}

enum ContentType {
  IMAGE
  VIDEO
  CAROUSEL
  STORY
  REEL
  TEXT
  HTML
}

enum ContentStatus {
  DRAFT
  REVIEW
  APPROVED
  PUBLISHED
  ARCHIVED
}

enum AdSetStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  ARCHIVED
}

enum AdStatus {
  DRAFT
  ACTIVE
  PAUSED
  REJECTED
  ARCHIVED
}

enum MessageStatus {
  NEW
  IN_PROGRESS
  RESPONDED
  CLOSED
  SPAM
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  permissions Permission[]
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  roles       Role[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PerformanceMetric {
  id        String   @id @default(cuid())
  path      String
  query     Json
  metrics   Json
  timestamp DateTime @default(now())

  @@index([timestamp])
  @@index([path])
}

model Invoice {
  id              String        @id @default(cuid())
  organizationId  String
  customerId      String?
  amount          Float
  currency        String        @default("usd")
  status          InvoiceStatus @default(DRAFT)
  dueDate         DateTime?
  paidAt          DateTime?
  stripeInvoiceId String?      @unique
  stripePaymentIntentId String? @unique
  items           InvoiceItem[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  organization    Organization  @relation(fields: [organizationId], references: [id])
  customer        Customer?     @relation(fields: [customerId], references: [id])
  client          Client?       @relation(fields: [clientId], references: [id])
  clientId        String?
}

model InvoiceItem {
  id          String   @id @default(cuid())
  invoiceId   String
  description String
  quantity    Int
  unitPrice   Float
  amount      Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model Payment {
  id                    String        @id @default(cuid())
  organizationId        String
  customerId           String?
  amount               Float
  currency             String        @default("usd")
  status               PaymentStatus
  stripePaymentIntentId String?      @unique
  stripeChargeId       String?       @unique
  paymentMethod        PaymentMethod @default(CARD)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt

  organization         Organization  @relation(fields: [organizationId], references: [id])
  customer             Customer?     @relation(fields: [customerId], references: [id])
  client              Client?       @relation(fields: [clientId], references: [id])
  clientId            String?
}

model Subscription {
  id                String             @id @default(cuid())
  organizationId    String             @unique
  status            SubscriptionStatus
  plan              SubscriptionPlan
  stripeSubscriptionId String?        @unique
  stripePriceId     String?
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean          @default(false)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  organization      Organization      @relation(fields: [organizationId], references: [id])
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
  UNPAID
}

enum SubscriptionPlan {
  BASIC
  PROFESSIONAL
  ENTERPRISE
}

enum InvoiceStatus {
  DRAFT
  OPEN
  PAID
  VOID
  UNCOLLECTIBLE
}

enum PaymentMethod {
  CARD
  BANK_TRANSFER
  CASH
  CHECK
  OTHER
}

model Document {
  id          String   @id @default(cuid())
  name        String
  url         String
  type        String
  size        Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  communications ProjectCommunication[] @relation("DocumentToProjectCommunication")
}

model Deal {
  id          String   @id @default(cuid())
  name        String
  value       Float
  stage       DealStage
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  proposals   Proposal[]
  leads       Lead[]
}

model CampaignParticipant {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  lead        Lead     @relation(fields: [leadId], references: [id])
  leadId      String

  @@index([leadId])
}
